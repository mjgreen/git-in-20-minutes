---
title: "git in 20 minutes"
subtitle: "open science tools"
author: "Matt Green"
date: "2023/3/8"
date-format: "MMMM D, YYYY"
format:
  revealjs: 
    output-dir: docs
    menu: true
    progress: true
    slide-number: true
    chalkboard: 
      buttons: true
    preview-links: auto
    multiplex: false
    logo: images/GitHub-logo.png
    css: styles.css
    footer: <https://mjgreen.github.io/git-in-20-minutes>
engine: knitr
---


## GitHub is like OSF

* a website
  * store an article
  * store supplementary materials
  * make them available for download

## GitHub is like OneDrive

:::: incremental
* shared files & collaborative authoring
* one master version & time travel
* but ...
* Q. Who controls when OneDrive files sync?
  * A. OneDrive controls sync
* Q. Who controls when GitHub files sync?
  * A. You control sync
<!-- * Q. Who controls when OSF files sync? -->
<!--   * A. umm, what's sync? -->
::::

::: {.notes}
Speaker notes go here.
:::

## git as 'aid' climbing

:::: {.columns}
::: {.column width="50%"}
![](images/aidclimbing.jpg)
:::

::: {.column width="50%"}
* If this guy slips in a minute, he only falls back to the last bit of 'protection' - the spike he hammered in here a moment ago.

* git has this concept too. When you reach a stable point, you do a "commit" action. If you make a mess after that, you can "reset" to get back to that stable point.
:::

::::

## horses for courses

* Choose the right tool for the job
  * Glasgow stats books: 
    * Github Pages for students reading the books; 
    * github repo for staff collaborating on writing the books
    * Lisa's github repo for developing the templates in R
    * Emily's OSF for journal article on data viz

## _commit_; _push_; _pull_

* When you `commit`, you make a stable point on your local computer ...
* ... but GitHub the website doesn't know that yet.
* `git push` is the action you do to send that stable point to the website.
* Your co-author does `git pull` to join you at that stable point, on their machine.

## _clone_; _checkout_
* If you spill wine on your laptop and it dies, you can switch to another machine and say `git clone` - and you are back at the last stable point
* If you decide that everything you've done since last month is garbage, you can `git checkout` a specific commit from the previous month and be back at _that_ stable point.


## git and time travel
* git starts by storing the full contents of the files you `commit` first
* then next time you `commit`, git figures out what you'd need to do to change that into what you've got now. Then it stores those differences (only the differences, not the new files themselves).

## git and time travel
* so a git repository consists of:
  * the full files from the first commit
  * and a set of differences per subsequent commit.
* This is very efficient, and means that everyone with a copy of the repository has the ability to re-construct any state from the past by applying the relevant set of differences to the original files. Hence, git lets you travel into the past and back again. 


## git and open science


## solving the multiple concurrent version problem

## live demo if time permits